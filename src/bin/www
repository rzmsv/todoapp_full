require('../configs')
const cluster = require('node:cluster') ;
const http =require('node:http') ;
const { availableParallelism } = require('node:os') ;
const process = require('node:process') ;
const app = require("../index")
const { User } = require("../models")
const { hashPassword } = require('../utils/bcrypt.utils')
const port = appConfigs.APP_PORT



let server = null
if (appConfigs.APP_PROTOCOL === "http") {
    const http =require('node:http')
    server = http.createServer(app)
} else {
    const https = require("https")
    server = https.createServer({
        key: "key",
        cert: "cert"
    },
    app
    )
}
/* --------------------------------- Cluster -------------------------------- */
const numCPUs = availableParallelism();
if (cluster.isPrimary) {
    console.log(`Primary ${process.pid} is running`);
  
    // Fork workers.
    for (let i = 0; i < numCPUs; i++) {
      cluster.fork();
    }
  
    cluster.on('exit', (worker, code, signal) => {
      console.log(`worker ${worker.process.pid} died`);
    });
} else {
    // Workers can share any TCP connection
    // In this case it is an HTTP server
    http.createServer(app).listen(port, async () => {
            try {
                let existUser = await User.findOne({ where: { email: "reza@gmail.com" } })
                if (!existUser) {
                    const hash = await hashPassword("password")
                    await User.create({ email: "reza@gmail.com", password: hash })
                }
            } catch (error) {
                console.log(error)
            }
            console.log(`[+] server started at: ${appConfigs.APP_PROTOCOL}://${appConfigs.APP_HOST}:${port}`)
        });
  
    console.log(`Worker ${process.pid} started`);
  }
/* ----------------------------------- --- ---------------------------------- */
